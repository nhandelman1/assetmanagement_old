from decimal import Decimal
from typing import Optional
from Database.POPO.SimpleServiceBillDataBase import SimpleServiceBillDataBase


class SolarBillData(SimpleServiceBillDataBase):
    """ Actual bill data for solar

    Costs depend on whether system was financed or purchased and any repairs/labor costs
        Financed: total cost is monthly payment to the installation company (an actual bill)
        Purchased: total cost is an opportunity cost if the funds had been invested in sp 500 total return
        Repairs/Labor: any of these costs that arise add to the monthly total cost
        Decommission: not a cost until it is performed, but removing the panels will be a cost in the future

    Attributes:
        see init docstring for attributes (db_dict is not kept as an attribute)
    """
    def __init__(self, real_estate, service_provider, start_date, end_date, solar_kwh, home_kwh, total_cost,
                 actual_costs, oc_bom_basis, oc_pnl_pct, oc_pnl, oc_eom_basis, paid_date=None, notes=None, db_dict=None,
                 calc_variables=None):
        """ init function

        Args:
            see superclass docstring
            solar_kwh (int): nonnegative kwh generated by solar system
            home_kwh (int): nonnegative kwh used by home
            total_cost (Decimal): total_cost = actual_costs + oc_pnl
            actual_costs (Decimal): sum of costs (positive) or credits (negative) for the solar provider during the
                month. Examples of these are federal/state credits, solar installer rebates/credits, supply costs or
                repair/labor costs.
            oc_bom_basis (Decimal): opportunity cost beginning of month basis. First month is the purchase price,
                otherwise, same as oc_eom_basis for previous month
            oc_pnl_pct (Decimal): pnl percent for sp 500 total return over the billing period
            oc_pnl (Decimal): opportunity cost pnl = oc_bom_basis * oc_pnl_pct
            oc_eom_basis (Decimal): opportunity cost end of month basis = oc_bom_basis + actual_costs + oc_pnl
            calc_variables (Optional[boolean]): True to call self.calc_variables() as the last operation in this
                function. Default None or False to not call self.calc_variables()
        """
        super().__init__(real_estate, service_provider, start_date, end_date, total_cost, paid_date=paid_date,
                         notes=notes)
        self.solar_kwh = solar_kwh
        self.home_kwh = home_kwh
        self.actual_costs = actual_costs
        self.oc_bom_basis = oc_bom_basis
        self.oc_pnl_pct = oc_pnl_pct
        self.oc_pnl = oc_pnl
        self.oc_eom_basis = oc_eom_basis

        self.db_dict_update(db_dict)

        if calc_variables:
            self.calc_variables()

    def __str__(self):
        """ __str__ override

        Format:
            Actual Bill: str(self.is_actual), super().__str__()

        Returns:
            str: as described by Format
        """
        return super().__str__() + "\nSolar KWH Production: " + str(self.solar_kwh) + ", Home KWH Usage: " + \
                str(self.home_kwh) + "\nActual Costs: " + str(self.actual_costs) + "\nOpportunity Cost: BOM Basis: " + \
            str(self.oc_bom_basis) + ", PNL Pct: " + str(self.oc_pnl_pct) + "%, PNL: " + str(self.oc_pnl) + \
            ", EOM Basis: " + str(self.oc_eom_basis)

    def copy(self, cost_ratio=None, real_estate=None, **kwargs):
        """ see superclass docstring

        Ratio applied to all attributes except opportunity cost pnl percent.
        """
        bill_copy = super().copy(cost_ratio=cost_ratio, real_estate=real_estate, **kwargs)

        if cost_ratio is not None:
            bill_copy.solar_kwh = int(bill_copy.solar_kwh * cost_ratio)
            bill_copy.home_kwh = int(bill_copy.home_kwh * cost_ratio)
            bill_copy.actual_costs *= cost_ratio
            bill_copy.oc_bom_basis *= cost_ratio
            bill_copy.oc_pnl *= cost_ratio
            bill_copy.oc_eom_basis *= cost_ratio

            bill_copy.notes += " Ratio of " + str(cost_ratio) + \
                               " applied to all attributes except opportunity cost pnl percent."

        return bill_copy

    def calc_variables(self):
        """ Calculate instance variables that can be calculated from other instance variables

        Performed for the following: self.total_cost, self.oc_pnl, self.oc_eom_basis

        total_cost (Decimal): total_cost = actual_costs + oc_pnl
        oc_pnl (Decimal): opportunity cost pnl = oc_bom_basis * oc_pnl_pct
        oc_eom_basis (Decimal): opportunity cost end of month basis = oc_bom_basis + actual_costs + oc_pnl
        """
        self.oc_pnl = self.oc_bom_basis * self.oc_pnl_pct / 100
        self.total_cost = self.actual_costs + self.oc_pnl
        self.oc_eom_basis = self.oc_bom_basis + self.actual_costs + self.oc_pnl